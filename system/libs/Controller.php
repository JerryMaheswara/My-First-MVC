<?php
namespace system\libs;

class Controller
{ 
	// protected $load;
	// protected $controller;
	// protected $method;
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	// public function __construct($controller, $method){
	public function __construct(){
		// $this->controller = $controller;
		// $this->method     = $method;
 		$this->load       = new Load;
	}
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	// public function dispatch()
	// {
	// 	$method = $this->method;
	// 	if (method_exists($this, $method))
	// 	{			
	// 		$this->$method();
	// 	}		
	// 	else 
	// 	{
	// 		$this->data['message'] = "Function <b>'$method()'</b> belum ada!";
	// 		$this->main();	
	// 	}
	// }
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	public static function jump($page)
	{
		if(!headers_sent)
		{
			header("Location:".$page);
			exit();
		}
		else
		{
			die ("<meta http-equiv='refresh' content='1;URL=".$page."'>");
		}
	}

	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	///////////////////////// INI YANG BENER /////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	protected static $_instances = array();
	protected $parameters = array();
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	public static function getInstance() {
		$class = get_called_class();
		if(! isset(static::$_instances[$class])) {
			static::$_instances[$class] = new $class();
		}
		return static::$_instances[$class];
	}
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	public function setParameters($parameters) {
		$this->parameters = array_merge($this->parameters, (array)$parameters);
	}
 
}

